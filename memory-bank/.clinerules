# Cline Rules for SeekerAug Project

## UI/UX Patterns & Preferences

*   **VS Code Aesthetic:** Adhere closely to VS Code layout, theming, and interaction patterns (Command Palette, Explorer, Tabs, Status Bar, Context Menus). See `systemPatterns.md` for detailed rules.
*   **Theming:** All UI elements MUST use CSS variables defined in theme JSON files (e.g., `var(--background-primary)`, `var(--accent-primary)`). Do not use hardcoded colors.
*   **Pop-up Elements (Modals, Context Menus):** Ensure these elements explicitly define `background` (usually `var(--background-secondary)`) and `border` (usually `var(--border-color)`) styles to avoid transparency issues and maintain visual consistency with the theme.
*   **Information Density:** Prioritize clear information display, suitable for workstation use. Use tooltips for truncated text or complex icons.
*   **Responsiveness:** While primarily desktop-focused, ensure layouts adapt reasonably to different window sizes.

## Technical Implementation

*   **State Management:** Use React `useState` for local component state and potentially `useContext` for shared UI state if Redux is overkill. Avoid prop drilling.
*   **API Interaction:** All backend interactions go through the defined functions in `src/renderer/projectApi.js`. Keep API calls clean and handle errors gracefully, providing user feedback.
*   **Backend Structure:** Follow the modular structure in `src/python/` (dataset, project management, API).
*   **Persistence:** Project listing and core metadata are managed via the Python backend and stored in `project.json` within each project directory (`~/.seekeraug/projects/`). Internal project data (images, annotations) uses the SQLite DB within the project dir.

## Workflow & Communication

*   **Memory Bank:** ALWAYS read core memory bank files at the start. Update `activeContext.md` and `progress.md` after significant changes. Review ALL files if requested via "update memory bank".
*   **Error Handling:** Implement `ErrorBoundary` components in React. Provide clear error messages to the user for both frontend and backend issues. Log detailed errors to the console.
*   **Styling:** Prefer inline styles using JS objects mapped to CSS variables for component-level styling. Use CSS classes for global styles or complex selectors if necessary. Ensure hover/focus states are visually distinct.
*   **Iterative Changes:** When addressing user feedback or fixing bugs, implement the complete intended solution for the specific issue before requesting testing. Avoid making minimal incremental changes that require multiple rounds of testing for a single problem. Clearly state the changes made and what is ready for testing.
